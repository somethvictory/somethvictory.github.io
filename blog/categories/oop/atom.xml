<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Oop | Someth Victory]]></title>
  <link href="http://somethvictory.github.io/blog/categories/oop/atom.xml" rel="self"/>
  <link href="http://somethvictory.github.io/"/>
  <updated>2015-08-05T22:02:03+07:00</updated>
  <id>http://somethvictory.github.io/</id>
  <author>
    <name><![CDATA[Someth Victory]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Singleton Pattern in Ruby]]></title>
    <link href="http://somethvictory.github.io/blog/2015/08/01/singleton-pattern-in-ruby/"/>
    <updated>2015-08-01T21:51:12+07:00</updated>
    <id>http://somethvictory.github.io/blog/2015/08/01/singleton-pattern-in-ruby</id>
    <content type="html"><![CDATA[<p>Singleton Pattern is a design pattern that allow a class to be instantiated only
once. The benefit of Singleton is to be ensure that there is only one and the same
instance of object is called every time. Ruby also support Singleton Pattern.</p>

<p>In order to create a singleton class in Ruby, <code>Singleton</code> module needs to be included.</p>

<p>Check out the code below:</p>

<pre><code class="Ruby Singleton Example">class OpenSRSServer
  include Singleton

  def connection
    @connection ||= OpenSRS::Server.new(
      key:      ENV['OPENSRS_ACCESS_KEY'],
      server:   ENV['OPENSRS_SERVER'],
      username: ENV['OPENSRS_REG_USERNAME']
    )
  end
end
</code></pre>

<p>The example above created a ruby singleton class called <code>OpensrsServer</code>, with an instance method called <code>connection</code>. This class is responsible for creating a connection object using <code>OpenSRS</code> gem.</p>

<p>In order to instantiate an object with singleton class in Ruby, we need to use <code>.instance</code> method rather than <code>.new</code>.</p>

<pre><code class="Ruby Singleton Object">server = OpenSRSSErver.instance
</code></pre>

<p>No matter how many time <code>OpenSRSServer.instance</code> get called, the object returned will be the same.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Transfer Object in Ruby]]></title>
    <link href="http://somethvictory.github.io/blog/2015/06/30/data-transfer-object/"/>
    <updated>2015-06-30T21:17:53+07:00</updated>
    <id>http://somethvictory.github.io/blog/2015/06/30/data-transfer-object</id>
    <content type="html"><![CDATA[<p>A Data Transfer Object(DTO) is an object which is used to encapsulate data. It
is commonly used in the Services layer which request data from third party API, or from the system itself. The benefit of DTOs is to convert the raw data in
an object and reduce unnecessary information. It also makes a great model in
MVC. Moreover, DTO makes the code very easy to maintain and test.</p>

<p>Given that we are writing some code to perform domain check from thrid party
API.</p>

<p>Let&rsquo;s see the example below:</p>

<pre><code class="ruby Request data to an API">result = API::Domain.check('some-domain.com')
</code></pre>

<p>The response is looked like this:</p>

<pre><code class="ruby Response result from an API">
{
"response": {
  "status": {
    "code": 200,
    "message": "OK"
  },
  "headers": {
    "Date": {
      "Fri, 20 Jun 2014 02:41:57 GMT"
    },
    "Content-Type": {
      "text/json"
    }
  },
  "body": {
    "type": "domain",
    "name": "some-domain.com",
    "price": "11.00",
    "status": "Available"
  }
}
</code></pre>

<p>In order to access the attributes of the response, it will requires to go
through all the hierarchy key structure:</p>

<pre><code class="ruby Access field name of the response">result = JSON.parse(result)
result['response']['body']['name']
# =&gt; 'some-domain.com'
result['response']['body']['type']
# =&gt; 'domain'
</code></pre>

<p>Let&rsquo;s say that we want to check whether or not the domain is available(domain is available only if its status is &lsquo;Available&rsquo; and price is less than 15)</p>

<p>The code will look like this:</p>

<pre><code class="ruby">result['response']['body']['status'] == 'Available' &amp;&amp;
result['response']['body']['price'].to_f &lt; 15
</code></pre>

<p>As you can see, the code above is not really efficient at all, in case of
readability and scalability.</p>

<p>In addition, what would happen when some fields in the hierarchy structure
needs to be changed? Let&rsquo;s say field <code>result['response']['body']</code> changed to <code>result['response']['data']</code>. As a result, the code above will be no longer work, so, the code need to be changed everywhere the <code>result</code> object is called.</p>

<h3>Perform with DTO</h3>

<p>First, create a new class called <code>DTO::Domain</code>. This class is responsible
for translating the data returned from the API into an object.</p>

<pre><code class="ruby DTO::Domain">class DTO::Domain
  attr_reader :type, :name, :price, :status

  def initialize(data)
    @type   = data['body']['type']
    @name   = data['body']['name']
    @price  = data['body']['price']
    @status = data['body']['status']
  end

  def available?
    status == 'Available' &amp;&amp; price &lt; 15
  end

  def taken?
    status == 'Taken'
  end
end
</code></pre>

<p>With <code>DTO::Domain</code>, we could instantiate a new object by passing the
data responded from the API.</p>

<pre><code class="ruby">result = JSON.parse(result)
domain = DTO::Domain.new(result['response'])
</code></pre>

<p>All the information responded form the API is encapsulated inside a
<code>DTO::Domain</code> class. Only needed information with some additional domain logic
is included in the object. In some case that the field in the API is changed,
only <code>DTO::Domain</code> class alone needs to be changed.</p>

<pre><code>domain.name
# =&gt; 'some-domain.com'
domain.taken?
# =&gt; false
domain.available?
# =&gt; true
domain.price
# =&gt; 11.0
</code></pre>

<p>The code now is much cleaner, maintainable, testable, and scalable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reduce Code Duplication With Metaprogramming]]></title>
    <link href="http://somethvictory.github.io/blog/2015/06/16/reduce-code-duplication-with-metaprogramming/"/>
    <updated>2015-06-16T20:53:15+07:00</updated>
    <id>http://somethvictory.github.io/blog/2015/06/16/reduce-code-duplication-with-metaprogramming</id>
    <content type="html"><![CDATA[<p>Metaprogramming is a wonderful tool for producing DRY(Don&rsquo;t Repeat Yourself) code in highly dynamic languages. It is commonly defined as “code that produces code”. Metaprogramming reduce the amount of unnecesssary code, make your code clean, and DRY, and easy to scale and maintain.</p>

<p>Let&rsquo;s take a look at the example below:</p>

<pre><code class="ruby Without Metaprogramming">class Domain &lt; ActiveRecord::Base
  validates :status, presence: true, inclusion: { in: %w(pointed new subodmain) }

  def self.pointed
    where(status: 'pointed')
  end

  def self.new
    where(status: 'new')
  end

  def self.subdomain
    where(status: 'subdomain')
  end

  def pointed?
    status == 'pointed'
  end

  def new?
    status == 'new'
  end

  def subdomain?
    status == 'subdomain'
  end
end
</code></pre>

<p>The example above is obvious that this is a maintenance issue in the making because the code is not DRY, and will take more work in scaling.</p>

<p>Let&rsquo;s say that we want to add another domain status <code>'transferred'</code>, so two methods would need to be created, <code>self.transferred</code> and <code>transferred?</code>.</p>

<p>Now let&rsquo;s see how we could resolve this issue with Metaprogramming</p>

<p>See example below:</p>

<pre><code class="ruby With Metaprogramming">class Domain &lt; ActiveRecord::Base
  STATUSES = %w( pointed new subdomain )
  validates :status, presence: true, inclusion: { in: STATUSES }

  # create self.pointed, self.new, self.subdomain
  class &lt;&lt; self
    STATUSES.each do |status_name|
      define_method "#{status_name}" do
        where(status: status_name)
      end
    end
  end

  # create pointed?, new?, subdomain?
  STATUSES.each do |status_name|
    define_method "#{status_name}?" do
      status == status_name
    end
  end

end
</code></pre>

<p>Now the code has been refactorred to use metaprogramming, with <code>define_method</code>. No matter how many domain statuses need to be added, only <code>STATUSES</code> constant needs to be changed, and everything will work normally. The funtionally in Example 2 is working exactly the same as in Example 1. All the methods will be automatically created in runtime.</p>

<p>As a clue, when writing code with metaprogramming, some comments about what the code does should be written for a better understanding.</p>
]]></content>
  </entry>
  
</feed>
