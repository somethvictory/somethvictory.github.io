<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dto | Someth Victory]]></title>
  <link href="http://somethvictory.github.io/blog/categories/dto/atom.xml" rel="self"/>
  <link href="http://somethvictory.github.io/"/>
  <updated>2015-06-25T22:41:52+07:00</updated>
  <id>http://somethvictory.github.io/</id>
  <author>
    <name><![CDATA[Someth Victory]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Data Transfer Object in Ruby]]></title>
    <link href="http://somethvictory.github.io/blog/2015/06/24/data-transfer-object/"/>
    <updated>2015-06-24T21:17:53+07:00</updated>
    <id>http://somethvictory.github.io/blog/2015/06/24/data-transfer-object</id>
    <content type="html"><![CDATA[<p>A Data Transfer Object(DTO) is an object which is used to encapsulate data. It
is commonly used in the Services layer which request data from third party API, or from the system itself. The benefit of DTOs is to convert the raw data in
an object and reduce unnecessary information. It also makes a great model in
MVC. Moreover, DTO makes the code very easy to maintain and test.</p>

<p>Given that we are writing some code to perform domain check from thrid party
API.</p>

<p>Let&rsquo;s see the example below:</p>

<pre><code class="ruby Request data to an API">result = API::Domain.check('some-domain.com')
</code></pre>

<p>The response is looked like this:</p>

<pre><code class="ruby Response result from an API">
{
"response": {
  "status": {
    "code": 200,
    "message": "OK"
  },
  "headers": {
    "Date": {
      "Fri, 20 Jun 2014 02:41:57 GMT"
    },
    "Content-Type": {
      "text/json"
    }
  },
  "body": {
    "type": "domain",
    "name": "some-domain.com",
    "price": "11.00",
    "status": "Available"
  }
}
</code></pre>

<p>In order to access the attributes of the response, it will requires to go
through all the hierarchy key structure:</p>

<pre><code class="ruby Access field name of the response">result = JSON.parse(result)
result['response']['body']['name']
# =&gt; 'some-domain.com'
result['response']['body']['type']
# =&gt; 'domain'
</code></pre>

<p>Let&rsquo;s say that we want to check whether or not the domain is available(domain is available only if its status is &lsquo;Available&rsquo; and price is less than 15)</p>

<p>The code will look like this:</p>

<pre><code class="ruby">result['response']['body']['status'] == 'Available' &amp;&amp;
result['response']['body']['price'].to_f &lt; 15
</code></pre>

<p>As you can see, the code above is not really efficient at all, in case of
readability and scalability.</p>

<p>In addition, what would happen when some fields in the hierarchy structure
needs to be changed? Let&rsquo;s say field <code>result['response']['body']</code> changed to <code>result['response']['data']</code>. As a result, the code above will be no longer work, so, the code need to be changed everywhere the <code>result</code> object is called.</p>

<h3>Perform with DTO</h3>

<p>First, create a new class called <code>DTO::Domain</code>. This class is responsible
for translating the data returned from the API into an object.</p>

<pre><code class="ruby DTO::Domain">class DTO::Domain
  attr_reader :type, :name, :price, :status

  def initialize(data)
    @type   = data['body']['type']
    @name   = data['body']['name']
    @price  = data['body']['price']
    @status = data['body']['status']
  end

  def available?
    status == 'Available' &amp;&amp; price &lt; 15
  end

  def taken?
    status == 'Taken'
  end
end
</code></pre>

<p>With <code>DTO::Domain</code>, we could instantiate a new object by passing the
data responded from the API.</p>

<pre><code class="ruby">result = JSON.parse(result)
domain = DTO::Domain.new(result['response'])
</code></pre>

<p>All the information responded form the API is encapsulated inside a
<code>DTO::Domain</code> class. Only needed information with some additional domain logic
is included in the object. In some case that the field in the API is changed,
only <code>DTO::Domain</code> class alone needs to be changed.</p>

<pre><code>domain.name
# =&gt; 'some-domain.com'
domain.taken?
# =&gt; false
domain.available?
# =&gt; true
domain.price
# =&gt; 11.0
</code></pre>

<p>The code now is much cleaner, maintainable, testable, and scalable.</p>
]]></content>
  </entry>
  
</feed>
